# Generated by Django 5.0.1 on 2025-09-17 06:13

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(default='#10B981', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Event Category',
                'verbose_name_plural': 'Event Categories',
                'db_table': 'event_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('organization', models.CharField(blank=True, max_length=200)),
                ('location_name', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=500)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('meeting_link', models.URLField(blank=True, validators=[django.core.validators.URLValidator()])),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('capacity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('current_attendees', models.PositiveIntegerField(default=0)),
                ('volunteers_needed', models.PositiveIntegerField(default=0)),
                ('current_volunteers', models.PositiveIntegerField(default=0)),
                ('requirements', models.JSONField(blank=True, default=list)),
                ('age_restriction', models.PositiveIntegerField(blank=True, null=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('allow_waitlist', models.BooleanField(default=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('external_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='events.eventcategory')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='EventFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('organization_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('content_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('venue_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True)),
                ('suggestions', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(blank=True, null=True)),
                ('would_attend_again', models.BooleanField(blank=True, null=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Feedback',
                'verbose_name_plural': 'Event Feedback',
                'db_table': 'event_feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='events/%Y/%m/%d/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='events.event')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Image',
                'verbose_name_plural': 'Event Images',
                'db_table': 'event_images',
                'ordering': ['-is_featured', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventRSVP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('attending', 'Attending'), ('maybe', 'Maybe'), ('not_attending', 'Not Attending'), ('waitlist', 'Waitlist')], max_length=20)),
                ('guests', models.PositiveIntegerField(default=0)),
                ('dietary_restrictions', models.TextField(blank=True)),
                ('special_needs', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('is_approved', models.BooleanField(default=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_rsvps', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event RSVP',
                'verbose_name_plural': 'Event RSVPs',
                'db_table': 'event_rsvps',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('update_type', models.CharField(choices=[('general', 'General Update'), ('schedule_change', 'Schedule Change'), ('location_change', 'Location Change'), ('cancellation', 'Cancellation'), ('reminder', 'Reminder'), ('important', 'Important Notice')], default='general', max_length=20)),
                ('notify_attendees', models.BooleanField(default=True)),
                ('notify_volunteers', models.BooleanField(default=True)),
                ('is_urgent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='events.event')),
            ],
            options={
                'verbose_name': 'Event Update',
                'verbose_name_plural': 'Event Updates',
                'db_table': 'event_updates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventVolunteer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('hours_committed', models.PositiveIntegerField(default=0)),
                ('skills_needed', models.JSONField(blank=True, default=list)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('checked_in', models.BooleanField(default=False)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='confirmed_volunteers', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='volunteers', to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Volunteer',
                'verbose_name_plural': 'Event Volunteers',
                'db_table': 'event_volunteers',
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_date', 'end_date'], name='events_start_d_92ba55_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['category', 'start_date'], name='events_categor_470f93_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['organizer', 'start_date'], name='events_organiz_f2946a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventfeedback',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='eventrsvp',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='eventvolunteer',
            unique_together={('event', 'user')},
        ),
    ]
