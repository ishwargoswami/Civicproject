# Generated by Django 5.0.1 on 2025-10-31 09:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0003_notificationpreference'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(max_length=50)),
                ('badge_image', models.ImageField(blank=True, null=True, upload_to='achievement_badges/')),
                ('criteria_type', models.CharField(max_length=50)),
                ('criteria_value', models.IntegerField(help_text='Number required to unlock')),
                ('points_reward', models.IntegerField(default=0)),
                ('credits_reward', models.IntegerField(default=0)),
                ('special_recognition', models.BooleanField(default=False)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievements',
                'ordering': ['rarity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CivicLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(choices=[(1, 'New Citizen'), (2, 'Active Neighbor'), (3, 'Community Helper'), (4, 'Civic Champion'), (5, 'Local Leader'), (6, 'City Ambassador'), (7, 'Urban Hero')], unique=True)),
                ('name', models.CharField(max_length=100)),
                ('min_points', models.IntegerField(help_text='Minimum points required')),
                ('icon', models.CharField(default='‚≠ê', max_length=50)),
                ('color', models.CharField(default='#3B82F6', max_length=7)),
                ('priority_response', models.BooleanField(default=False, help_text='Issues get priority attention')),
                ('direct_messaging', models.BooleanField(default=False, help_text='Can message officials directly')),
                ('event_priority', models.BooleanField(default=False, help_text='Priority event registration')),
                ('consultation_access', models.BooleanField(default=False, help_text='Participate in urban planning')),
                ('community_credits', models.IntegerField(default=0, help_text='Monthly credits for city services')),
            ],
            options={
                'db_table': 'civic_levels',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='CivicActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('issue_reported', 'Issue Reported'), ('issue_resolved', 'Issue Resolved'), ('issue_voted', 'Voted on Issue'), ('event_attended', 'Event Attended'), ('event_organized', 'Event Organized'), ('forum_post', 'Forum Post Created'), ('forum_comment', 'Forum Comment'), ('poll_voted', 'Poll Voted'), ('petition_signed', 'Petition Signed'), ('volunteer_hours', 'Volunteer Hours'), ('project_feedback', 'Project Feedback'), ('helpful_vote', 'Helpful Vote Received'), ('streak_milestone', 'Streak Milestone')], max_length=50)),
                ('points_earned', models.IntegerField()),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='civic_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Civic Activities',
                'db_table': 'civic_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunityCredit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit_type', models.CharField(choices=[('parking', 'Parking Fee Waiver'), ('permit', 'Permit Processing Priority'), ('recreation', 'Recreation Center Pass'), ('transit', 'Public Transit Credit'), ('event', 'Event Ticket'), ('consultation', 'Paid Urban Planning Consultation'), ('recognition', 'Community Recognition Certificate')], max_length=50)),
                ('credits_spent', models.IntegerField()),
                ('redeemed_at', models.DateTimeField(auto_now_add=True)),
                ('redeemed_for', models.TextField(help_text='What the credit was redeemed for')),
                ('redemption_code', models.CharField(max_length=20, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('proof_image', models.ImageField(blank=True, null=True, upload_to='credit_proofs/')),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credit_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'community_credits',
                'ordering': ['-redeemed_at'],
            },
        ),
        migrations.CreateModel(
            name='UserCivicProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0)),
                ('issues_reported', models.IntegerField(default=0)),
                ('issues_resolved', models.IntegerField(default=0)),
                ('events_attended', models.IntegerField(default=0)),
                ('forum_contributions', models.IntegerField(default=0)),
                ('volunteer_hours', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('community_credits', models.IntegerField(default=0, help_text='Credits for city services')),
                ('priority_status', models.BooleanField(default=False)),
                ('verified_contributor', models.BooleanField(default=False)),
                ('current_streak_days', models.IntegerField(default=0, help_text='Consecutive days active')),
                ('longest_streak_days', models.IntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('achievements_unlocked', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.civiclevel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='civic_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_civic_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('certificate_url', models.URLField(blank=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_achievements',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
